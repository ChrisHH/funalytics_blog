---
title: "Maximizing Loyalty Points"
author: Christian Jaehnert
date: '2023-12-08'
draft: false
format: html
slug: 
categories:
  - R
  - ggplot
  - tidyverse
  - bargain
  - saving money
  - loyalty points
tags:
  - R
  - ggplot
  - groceries
  
summary: "Analyzing the best option to maximize loyalty points."
---

```{r}
#| include: false
library(knitr)
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, warning = FALSE, 
                      message = FALSE, echo = FALSE, dpi = 180,
                      fig.width = 7, fig.height = 5)
library(tidyverse)
library(silgelib)


theme_set(theme_plex())
update_geom_defaults("rect", list(fill = "#0032a0", alpha = 0.8))
update_geom_defaults("line", list(color = "#0032a0", alpha = 0.8))

```

## Situation at Checkout

Imagine yourself at the checkout counter of a supermarket with a long line of unpatient customers behind you. The register shows your total as â‚¬31.28.

![Source: DALLâ€¢E](images/DALLÂ·E%202023-12-08%2023.25.03%20-%20A%20realistic%20depiction%20of%20a%20supermarket%20checkout%20scene.%20Include%20a%20cashier,%20appearing%20professional%20and%20attentive,%20and%20a%20central%20human%20customer%20at%20the%20co.png){fig-align="center"}

In this situation, which coupon of the following would you choose in order to maximize your loyalty points with the supermarket (normally, you get one point for every cent)?

-   Triple points for a purchase of 15 Euros or more

-   5,000 extra points for a purchase of 20 Euros or more

-   Quintuple points for a purchase of 25 Euros or more

-   10,000 extra points for a purchase of 30 Euros or more

Would you be tempted to select the coupon offering 10,000 extra points, simply because the number of extra points is impressively large and you've met the required threshold? Alternatively, is the quintuple points option a smarter choice? Quick calculations could resolve this dilemma, but remember, a queue of customers is already eyeing you impatiently from behind. Their expectant gazes add pressure to your decision-making process.

Oh yes, these coupons are actually available at a supermarket right now. I didn't make that up. ðŸ˜‰\
But I experienced this situation firsthand.

Today, we'll delve into a graphical solution of the question and, as an added benefit, examine a calculated decision tree designed to guide you in selecting the most suitable coupon for this particular scenario. Lets jump into the quick and practical analysis!

## Identifying the Best Coupon

First, let's create a dataframe populated with values ranging from â‚¬0 to â‚¬100, in increments of â‚¬0.01. As mentioned already, the number of loyalty points typically awarded corresponds to the payment amount in cents. Then, I will define the four coupons as variables by applying the math of the mechanic. At the end, I determine the best coupon for each purchase value and store it in another variable.

```{r, echo = TRUE, collapse = TRUE}
#| code-fold: true
#| code-summary: "Click here to unhide/hide the code."

wert <- tibble(purchase_value = seq(0.01, 100,0.01))
wert <- wert %>% 
  mutate(points = purchase_value * 100) %>% 
  mutate(points_5000_from_20 = if_else(purchase_value >=20, points + 5000, points),
         points_10000_from_30 = if_else(purchase_value >=30, points + 10000, points),
         points_5x_from_25 = if_else(purchase_value >= 25, 5*points, points),
         points_3x_from_15 = if_else(purchase_value >=15, 3*points, points)) %>% 
  mutate(best_value = pmax(points_5000_from_20, points_10000_from_30, points_5x_from_25, points_3x_from_15))

```

Lets have a glimpse on the data frame.

```{r}
#| include: true
glimpse(wert)
```

```{r}

wert <- wert %>% 
  mutate(best_option = case_when(
    best_value == points_5000_from_20 ~ "points_5000_from_20",
    best_value == points_10000_from_30 ~ "points_10000_from_30",
    best_value == points_5x_from_25 ~ "points_5x_from_25",
    best_value == points_3x_from_15 ~ "points_3x_from_15",
    TRUE ~ "no_coupon"
  )) %>% 
  mutate(best_option = if_else(purchase_value < 15, "no_coupon", best_option))
```

Now, let's already take a graphical look at how each coupon performs!

```{r}

wert %>% 
  select(-best_value, -best_option) %>% 
  pivot_longer(-c("purchase_value","points")) %>% 
  ggplot(aes(x = purchase_value, y = value, color = name)) +
  geom_line(linewidth = 1.3) +
  geom_abline(slope = 100, linetype = "dashed", color = "grey80") +
  labs(x = "Purchase Value", y ="Loyalty Points", color = "") +
  scale_x_continuous(labels = scales::dollar_format(prefix = "", suffix = "â‚¬"), 
                     n.breaks = 10) +
  scale_y_continuous(labels = scales::number_format(), n.breaks = 10) +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom")
```

In the plot, the dashed line represents loyalty points earned per purchase value without using a coupon.

Now, let's delve into the coupon details -- it's quite intriguing!

The coupon offering '10,000 extra points for purchases over â‚¬30' (indicated by the red line) is not advantageous for any purchase value. Hence, one might consider discarding this coupon right away, especially if new coupon booklets are regularly available. Similarly, the coupon providing '5,000 extra points for purchases over â‚¬20' benefits customers only within a very narrow spending range.

Another observation is that coupons offering a relative increase in extra loyalty points perform better. As the purchase value increases, the gap between standard and extra points widens.

## Decision Tree

A practical guideline might be to prioritize coupons that offer increased loyalty points in proportion to the amount spent. However, to validate this strategy, let's proceed with running the decision tree.

```{r, echo = TRUE, collapse = TRUE}
#| code-fold: true
#| code-summary: "Click here to unhide/hide the code."

library(rpart)
library(rpart.plot)


tree <- rpart(best_option ~ purchase_value, 
              data = wert , 
              method = "class")


rpart.plot(tree, fallen.leaves = TRUE, under = TRUE, type = 5, legend.y = NA)


```

Have fun cutting the decision tree out and tucking them into your wallet ðŸ˜ƒ

Until next time!
